{"version":3,"sources":["components/Header/Header.jsx","components/UserRow/UserRow.jsx","components/TableHeaderCell/TableHeaderCell.jsx","components/TableUsers/TableUsers.jsx","AppBackend.js","components/Footer/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","props","onSelectChange","limit","react_default","a","createElement","Form","Control","as","onChange","event","target","value","defaultValue","UserRow","_React$Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleMode","setState","isEditMode","state","inherits","createClass","key","_this$props","id","name","email","className","type","Button","onClick","React","Component","TableHeaderCell","order","title","arrowUpClassName","classNames","table-header-cell__arrow_active","arrowDownClassName","TableUsers","apply","arguments","Table","striped","bordered","hover","TableHeaderCell_TableHeaderCell_TableHeaderCell","users","map","user","index","UserRow_UserRow","assign","mode","AppBackend","baseUrl","window","location","hostname","_ref","_ref$limit","_ref$page","page","_ref$search","search","concat","fetch","then","response","json","method","headers","Accept","Content-Type","body","JSON","stringify","Footer","currentPage","onPageChange","react","App","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","updateUsers","stop","_x","onSearchChange","_ref2","_callee2","_context2","_x2","_ref3","_callee3","_context3","_x3","_callee4","_this$state","_context4","backend","get","sent","Container","Header_Header_Header","onSearhChange","TableUsers_TableUsers","Footer_Footer","Boolean","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dddaffcb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Form} from \"react-bootstrap\";\r\nimport './Header.css';\r\n\r\nexport const Header = (props) => {\r\n  const {onSelectChange, limit} = props;\r\n\r\n  return (\r\n    <header>\r\n      <Form.Control as=\"select\"\r\n                    onChange={(event) => onSelectChange(event.target.value)}\r\n                    defaultValue={limit}>\r\n        <option>5</option>\r\n        <option>10</option>\r\n        <option>15</option>\r\n      </Form.Control>\r\n    </header>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {Button} from \"react-bootstrap\";\r\n\r\n\r\nexport class UserRow extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isEditMode: false\r\n    };\r\n  }\r\n\r\n  toggleMode = () => {\r\n    this.setState({\r\n      isEditMode: !this.state.isEditMode\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {id, name, email} = this.props;\r\n    const {isEditMode} = this.state;\r\n\r\n    return (\r\n      <tr>\r\n        <td className=\"user-row__id\">{id}</td>\r\n        <td>{isEditMode ? <input type=\"text\" value={name}/> : name}</td>\r\n        <td>{email}</td>\r\n        <td>\r\n          {\r\n            isEditMode ? (\r\n              <Button onClick={this.toggleMode}>Save</Button>\r\n            ) : (\r\n              <Button onClick={this.toggleMode}>Update</Button>\r\n            )\r\n          }\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport './TableHeaderCell.css';\r\nimport * as classNames from 'classnames';\r\n\r\nexport const TableHeaderCell = (props) => {\r\n  const {order, title} = props;\r\n\r\n  let arrowUpClassName = classNames(\r\n    'fa fa-sort-up',\r\n    'table-header-cell__arrow',\r\n    {\r\n      'table-header-cell__arrow_active': order === 'asc'\r\n    }\r\n  );\r\n\r\n  let arrowDownClassName = classNames(\r\n    'fa fa-sort-down',\r\n    'table-header-cell__arrow',\r\n    {\r\n    'table-header-cell__arrow_active': order === 'desc'\r\n    }\r\n  );\r\n\r\n  return (\r\n    <td>\r\n      <div className=\"table-header-cell\">\r\n        <span className=\"table-header-cell__title\">{title}</span>\r\n\r\n        <div className=\"table-header-cell__arrows\">\r\n          <i className={arrowUpClassName}/>\r\n          <i className={arrowDownClassName}/>\r\n        </div>\r\n      </div>\r\n    </td>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {Table} from \"react-bootstrap\";\r\nimport {UserRow} from \"../UserRow/UserRow\";\r\nimport {TableHeaderCell} from \"../TableHeaderCell/TableHeaderCell\";\r\n\r\nexport class TableUsers extends React.Component {\r\n  render() {\r\n    return (\r\n      <Table striped bordered hover>\r\n        <thead>\r\n        <tr>\r\n          <TableHeaderCell title=\"#\" order=\"desc\"/>\r\n          <TableHeaderCell title=\"First Name\" order=\"asc\"/>\r\n          <TableHeaderCell title=\"Email\" order=\"asc\"/>\r\n          <td>Actions</td>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        {\r\n          this.props.users.map((user, index) => {\r\n            return <UserRow {...user} mode={index % 2 ? 'edit' : 'view'} key={user.id}/>;\r\n          })\r\n        }\r\n        </tbody>\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n","export class AppBackend {\r\n  constructor() {\r\n    this.baseUrl = 'https://5bf417c491c25b0013a3b9a2.mockapi.io';\r\n  }\r\n\r\n  isDevEnvironment() {\r\n    return window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\r\n  }\r\n\r\n  get({limit = 5, page = 1, search = ''}) {\r\n    let url = `${this.baseUrl}/users?`;\r\n\r\n    if (page) {\r\n      url += `page=${page}`;\r\n    }\r\n\r\n\r\n    return fetch(`${this.baseUrl}/users?page=${page}&limit=${limit}&search=${search}`)\r\n      .then((response) => response.json());\r\n  }\r\n\r\n  create(user) {\r\n    return fetch(`${this.baseUrl}/users`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(user)\r\n    });\r\n  }\r\n\r\n  delete(id) {\r\n    return fetch(`${this.baseUrl}/users/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n  }\r\n}\r\n","import * as React from \"react\";\r\n\r\nexport class Footer extends React.Component {\r\n  render() {\r\n    const {currentPage, onPageChange} = this.props;\r\n\r\n    return (\r\n      <footer>\r\n        <button onClick={() => onPageChange(currentPage + 1)}>Prev</button>\r\n        <button onClick={() => onPageChange(currentPage - 1)}>Next</button>\r\n      </footer>\r\n    )\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport {Container} from 'react-bootstrap';\r\nimport {Header} from \"./components/Header/Header\";\r\nimport {TableUsers} from \"./components/TableUsers/TableUsers\";\r\nimport {AppBackend} from \"./AppBackend\";\r\nimport {Footer} from \"./components/Footer/Footer\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      users: [],\r\n      limit: 15,\r\n      page: 1,\r\n      search: ''\r\n    };\r\n\r\n    this.backend = new AppBackend();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateUsers();\r\n  }\r\n\r\n  onSelectChange = async (limit) => {\r\n    this.setState({limit}, () => {\r\n      this.updateUsers();\r\n    });\r\n  };\r\n\r\n  onSearchChange = async (event) => {\r\n    const search = event.target.value;\r\n\r\n    this.setState({search}, () => {\r\n      this.updateUsers();\r\n    });\r\n  };\r\n\r\n  onPageChange = async (value) => {\r\n    this.setState({page: value}, () => {\r\n      this.updateUsers();\r\n    });\r\n  }\r\n\r\n  updateUsers = async () => {\r\n    const {limit, search} = this.state;\r\n\r\n    const users = await this.backend.get({\r\n      search,\r\n      limit,\r\n    });\r\n\r\n    this.setState({\r\n      users\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Header onSelectChange={this.onSelectChange}\r\n                limit={this.state.limit}\r\n                onSearhChange={this.onSearchChange}\r\n        />\r\n        <TableUsers users={this.state.users}/>\r\n        <Footer onPageChange={this.onPageChange}/>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}